#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\r\n\ @author\ Jonny\r\n
comment1.params=vertices\ edges
comment1.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment1.text=\r\n\ creates\ a\ graph\ with\ the\ paramaters\ given\r\n\r\n\ @param\ vertices\r\n\ @param\ edges\r\n
comment10.params=v\ w
comment10.target=boolean\ areAdjacent(Vertex,\ Vertex)
comment10.text=\r\n\ Checks\ whether\ two\ vertices\ are\ connected\ to\ one\ another\r\n\r\n\ @param\ v\ a\ vertex\r\n\ @param\ w\ a\ vertex\r\n\ @return\ true\ if\ v\ and\ we\ are\ adjacent\ and\ false\ otherwise.\r\n\r\n
comment11.params=v
comment11.target=java.util.ArrayList\ incidentEdges(Vertex)
comment11.text=\r\n\ Finds\ and\ returns\ the\ set\ of\ edges\ that\ are\ incident\ to\ a\ given\ vertex.\r\n\r\n\ @param\ v\ the\ vertex\r\n\ @return\ a\ list\ of\ edges\r\n
comment12.params=v\ n
comment12.target=java.lang.String\ rename(Vertex,\ java.lang.String)
comment12.text=\r\n\ Renames\ vertex\ v\ as\ n\r\n\r\n\ @param\ v\ a\ vertex\r\n\ @param\ n\ the\ new\ name\r\n\ @return\ the\ old\ edge\ name\r\n
comment13.params=e\ n
comment13.target=java.lang.String\ rename(Edge,\ java.lang.String)
comment13.text=\r\n\ Renames\ edge\ e\ as\ n\r\n\r\n\ @param\ e\ an\ edge\r\n\ @param\ n\ the\ new\ name\r\n\ @return\ the\ old\ edge\ name\r\n
comment2.params=
comment2.target=Graph()
comment2.text=\r\n\ creates\ an\ empty\ graph\r\n
comment3.params=n
comment3.target=Vertex\ insertVertex(java.lang.String)
comment3.text=\r\n\ Insert\ a\ new\ vertex\ with\ name\ n\ into\ the\ graph.\r\n\r\n\ @param\ n\ String\r\n\ @return\ the\ new\ Vertex\r\n
comment4.params=v
comment4.target=java.lang.String\ removeVertex(Vertex)
comment4.text=\r\n\ Remove\ the\ given\ vertex\ from\ the\ graph.\ The\ name\ of\ the\ vertex\ is\r\n\ returned,\ or\ null\ if\ the\ graph\ does\ not\ contain\ the\ vertex.\r\n\r\n\ @param\ v\ Vertex\r\n\ @return\ the\ name\ of\ the\ vertex\ or\ null.\r\n
comment5.params=v\ w\ n
comment5.target=Edge\ insertEdge(Vertex,\ Vertex,\ java.lang.String)
comment5.text=\r\n\ Builds\ a\ new\ edge\ with\ end\ vertices\ v\ and\ w\ and\ name\ n\ and\ inserts\ it\r\n\ into\ the\ graph.\r\n\r\n\ @param\ v\ Vertex\r\n\ @param\ w\ Vertex\r\n\ @param\ n\ String\r\n\ @return\ the\ new\ Edge\r\n
comment6.params=e
comment6.target=java.lang.String\ removeEdge(Edge)
comment6.text=\r\n\ Removes\ the\ edge\ e\ from\ the\ graph.\r\n\r\n\ @param\ e\ the\ edge\ to\ be\ removed\r\n\ @return\ the\ name\ or\ null\ if\ e\ does\ not\ exist\r\n
comment7.params=e\ v
comment7.target=Vertex\ opposite(Edge,\ Vertex)
comment7.text=\r\n\ Returns\ the\ endpoint\ vertex\ of\ edge\ e\ that\ is\ 'opposite'\ to\ its\ other\r\n\ endpoint\ vertex\ v.\r\n\r\n\ @param\ e\ Edge\r\n\ @param\ v\ Vertex\r\n\ @return\ a\ vertex\ or\ null\r\n
comment8.params=
comment8.target=java.util.ArrayList\ vertices()
comment8.text=\r\n\ Returns\ a\ collection\ containing\ all\ of\ the\ vertices\ in\ the\ graph.\r\n\r\n\ @return\ an\ ArrayList\ list\ of\ vertices\r\n
comment9.params=
comment9.target=java.util.ArrayList\ edges()
comment9.text=\r\n\ Returns\ a\ collection\ all\ of\ the\ edges\ in\ the\ graph.\r\n\r\n\ @return\ an\ ArrayList\ of\ edges\r\n
numComments=14
